{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';// 创建axios实例\nconst api=axios.create({baseURL:API_BASE_URL,timeout:10000,headers:{'Content-Type':'application/json'}});// 请求拦截器\napi.interceptors.request.use(config=>{var _config$method;console.log('API请求:',(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),config.url);return config;},error=>{console.error('API请求错误:',error);return Promise.reject(error);});// 响应拦截器\napi.interceptors.response.use(response=>{console.log('API响应:',response.status,response.config.url);return response;},error=>{var _error$response,_error$response2;console.error('API响应错误:',(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data);return Promise.reject(error);});// API服务类\nexport class MahjongAPI{/**\n   * 分析游戏状态\n   */static async analyzeGame(request){try{const response=await api.post('/api/mahjong/analyze',request);return response.data;}catch(error){console.error('分析游戏失败:',error);throw new Error('分析游戏失败，请稍后重试');}}/**\n   * 获取所有麻将牌信息\n   */static async getTileCodes(){try{const response=await api.get('/api/mahjong/tile-codes');return response.data.tiles;}catch(error){console.error('获取麻将牌信息失败:',error);throw new Error('获取麻将牌信息失败');}}/**\n   * 健康检查\n   */static async healthCheck(){try{const response=await api.get('/health');return response.data.status==='healthy';}catch(error){console.error('健康检查失败:',error);return false;}}/**\n   * 获取API信息\n   */static async getApiInfo(){try{const response=await api.get('/');return response.data;}catch(error){console.error('获取API信息失败:',error);throw new Error('获取API信息失败');}}}// WebSocket连接管理\nexport class WebSocketManager{constructor(clientId,onMessage,onConnect,onDisconnect,onError){this.clientId=clientId;this.onMessage=onMessage;this.onConnect=onConnect;this.onDisconnect=onDisconnect;this.onError=onError;this.ws=null;this.reconnectTimeout=null;this.reconnectDelay=3000;// 3秒后重连\nthis.maxReconnectAttempts=5;this.reconnectAttempts=0;}connect(){try{const wsUrl=\"\".concat(API_BASE_URL.replace('http','ws'),\"/api/mahjong/ws/\").concat(this.clientId);this.ws=new WebSocket(wsUrl);this.ws.onopen=()=>{console.log('WebSocket连接已建立');this.reconnectAttempts=0;this.onConnect();};this.ws.onmessage=event=>{try{const data=JSON.parse(event.data);console.log('收到WebSocket消息:',data);this.onMessage(data);}catch(error){console.error('解析WebSocket消息失败:',error);}};this.ws.onclose=()=>{console.log('WebSocket连接已关闭');this.onDisconnect();this.attemptReconnect();};this.ws.onerror=error=>{console.error('WebSocket错误:',error);this.onError(error);};}catch(error){console.error('创建WebSocket连接失败:',error);this.onError(error);}}attemptReconnect(){if(this.reconnectAttempts<this.maxReconnectAttempts){this.reconnectAttempts++;console.log(\"\\u5C1D\\u8BD5\\u91CD\\u8FDE... (\".concat(this.reconnectAttempts,\"/\").concat(this.maxReconnectAttempts,\")\"));this.reconnectTimeout=setTimeout(()=>{this.connect();},this.reconnectDelay);}else{console.log('达到最大重连次数，停止重连');}}sendMessage(message){if(this.ws&&this.ws.readyState===WebSocket.OPEN){this.ws.send(JSON.stringify(message));}else{console.warn('WebSocket未连接，无法发送消息');}}disconnect(){if(this.reconnectTimeout){clearTimeout(this.reconnectTimeout);this.reconnectTimeout=null;}if(this.ws){this.ws.close();this.ws=null;}}isConnected(){return this.ws!==null&&this.ws.readyState===WebSocket.OPEN;}}export default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","_error$response2","data","MahjongAPI","analyzeGame","post","Error","getTileCodes","get","tiles","healthCheck","getApiInfo","WebSocketManager","constructor","clientId","onMessage","onConnect","onDisconnect","onError","ws","reconnectTimeout","reconnectDelay","maxReconnectAttempts","reconnectAttempts","connect","wsUrl","concat","replace","WebSocket","onopen","onmessage","event","JSON","parse","onclose","attemptReconnect","onerror","setTimeout","sendMessage","message","readyState","OPEN","send","stringify","warn","disconnect","clearTimeout","close","isConnected"],"sources":["D:/codes/PocketFlow-Tutorial-Codebase-Knowledge/paul/mj/frontend/src/utils/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { GameRequest, GameResponse, TileInfo } from '../types/mahjong';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 请求拦截器\napi.interceptors.request.use(\n  (config) => {\n    console.log('API请求:', config.method?.toUpperCase(), config.url);\n    return config;\n  },\n  (error) => {\n    console.error('API请求错误:', error);\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器\napi.interceptors.response.use(\n  (response) => {\n    console.log('API响应:', response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error('API响应错误:', error.response?.status, error.response?.data);\n    return Promise.reject(error);\n  }\n);\n\n// API服务类\nexport class MahjongAPI {\n  /**\n   * 分析游戏状态\n   */\n  static async analyzeGame(request: GameRequest): Promise<GameResponse> {\n    try {\n      const response = await api.post<GameResponse>('/api/mahjong/analyze', request);\n      return response.data;\n    } catch (error) {\n      console.error('分析游戏失败:', error);\n      throw new Error('分析游戏失败，请稍后重试');\n    }\n  }\n\n  /**\n   * 获取所有麻将牌信息\n   */\n  static async getTileCodes(): Promise<TileInfo[]> {\n    try {\n      const response = await api.get<{ tiles: TileInfo[] }>('/api/mahjong/tile-codes');\n      return response.data.tiles;\n    } catch (error) {\n      console.error('获取麻将牌信息失败:', error);\n      throw new Error('获取麻将牌信息失败');\n    }\n  }\n\n  /**\n   * 健康检查\n   */\n  static async healthCheck(): Promise<boolean> {\n    try {\n      const response = await api.get('/health');\n      return response.data.status === 'healthy';\n    } catch (error) {\n      console.error('健康检查失败:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 获取API信息\n   */\n  static async getApiInfo(): Promise<any> {\n    try {\n      const response = await api.get('/');\n      return response.data;\n    } catch (error) {\n      console.error('获取API信息失败:', error);\n      throw new Error('获取API信息失败');\n    }\n  }\n}\n\n// WebSocket连接管理\nexport class WebSocketManager {\n  private ws: WebSocket | null = null;\n  private reconnectTimeout: NodeJS.Timeout | null = null;\n  private readonly reconnectDelay = 3000; // 3秒后重连\n  private readonly maxReconnectAttempts = 5;\n  private reconnectAttempts = 0;\n\n  constructor(\n    private clientId: string,\n    private onMessage: (data: any) => void,\n    private onConnect: () => void,\n    private onDisconnect: () => void,\n    private onError: (error: Event) => void\n  ) {}\n\n  connect(): void {\n    try {\n      const wsUrl = `${API_BASE_URL.replace('http', 'ws')}/api/mahjong/ws/${this.clientId}`;\n      this.ws = new WebSocket(wsUrl);\n\n      this.ws.onopen = () => {\n        console.log('WebSocket连接已建立');\n        this.reconnectAttempts = 0;\n        this.onConnect();\n      };\n\n      this.ws.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          console.log('收到WebSocket消息:', data);\n          this.onMessage(data);\n        } catch (error) {\n          console.error('解析WebSocket消息失败:', error);\n        }\n      };\n\n      this.ws.onclose = () => {\n        console.log('WebSocket连接已关闭');\n        this.onDisconnect();\n        this.attemptReconnect();\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('WebSocket错误:', error);\n        this.onError(error);\n      };\n    } catch (error) {\n      console.error('创建WebSocket连接失败:', error);\n      this.onError(error as Event);\n    }\n  }\n\n  private attemptReconnect(): void {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`尝试重连... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      \n      this.reconnectTimeout = setTimeout(() => {\n        this.connect();\n      }, this.reconnectDelay);\n    } else {\n      console.log('达到最大重连次数，停止重连');\n    }\n  }\n\n  sendMessage(message: any): void {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket未连接，无法发送消息');\n    }\n  }\n\n  disconnect(): void {\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n    \n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  isConnected(): boolean {\n    return this.ws !== null && this.ws.readyState === WebSocket.OPEN;\n  }\n}\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}