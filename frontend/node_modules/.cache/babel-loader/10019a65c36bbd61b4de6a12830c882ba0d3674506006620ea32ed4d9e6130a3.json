{"ast":null,"code":"export let TileType = /*#__PURE__*/function (TileType) {\n  TileType[\"WAN\"] = \"wan\";\n  // 万\n  TileType[\"TIAO\"] = \"tiao\";\n  // 条\n  TileType[\"TONG\"] = \"tong\";\n  // 筒\n  TileType[\"ZI\"] = \"zi\"; // 字牌\n  return TileType;\n}({});\nexport let MeldType = /*#__PURE__*/function (MeldType) {\n  MeldType[\"PENG\"] = \"peng\";\n  // 碰\n  MeldType[\"GANG\"] = \"gang\";\n  // 杠\n  MeldType[\"CHI\"] = \"chi\"; // 吃\n  return MeldType;\n}({});\nexport let GangType = /*#__PURE__*/function (GangType) {\n  GangType[\"MING_GANG\"] = \"ming_gang\";\n  // 明杠\n  GangType[\"AN_GANG\"] = \"an_gang\"; // 暗杠\n  return GangType;\n}({});\n// 输入模式枚举\nexport let InputMode = /*#__PURE__*/function (InputMode) {\n  InputMode[\"ADD_TO_HAND\"] = \"add_to_hand\";\n  InputMode[\"DISCARD\"] = \"discard\";\n  InputMode[\"PENG\"] = \"peng\";\n  InputMode[\"MING_GANG\"] = \"ming_gang\";\n  InputMode[\"AN_GANG\"] = \"an_gang\";\n  return InputMode;\n}({});\n\n// 工具函数\nexport const createTile = (type, value) => ({\n  type,\n  value\n});\nexport const tileToCode = tile => {\n  switch (tile.type) {\n    case TileType.WAN:\n      return tile.value;\n    case TileType.TIAO:\n      return tile.value + 10;\n    case TileType.TONG:\n      return tile.value + 20;\n    case TileType.ZI:\n      return tile.value + 30;\n    default:\n      throw new Error(`Invalid tile type: ${tile.type}`);\n  }\n};\nexport const codeToTile = code => {\n  if (1 <= code && code <= 9) {\n    return {\n      type: TileType.WAN,\n      value: code\n    };\n  } else if (11 <= code && code <= 19) {\n    return {\n      type: TileType.TIAO,\n      value: code - 10\n    };\n  } else if (21 <= code && code <= 29) {\n    return {\n      type: TileType.TONG,\n      value: code - 20\n    };\n  } else if (31 <= code && code <= 37) {\n    return {\n      type: TileType.ZI,\n      value: code - 30\n    };\n  } else {\n    throw new Error(`Invalid tile code: ${code}`);\n  }\n};\nexport const tileToString = tile => {\n  const typeMap = {\n    [TileType.WAN]: \"万\",\n    [TileType.TIAO]: \"条\",\n    [TileType.TONG]: \"筒\",\n    [TileType.ZI]: [\"\", \"东\", \"南\", \"西\", \"北\", \"中\", \"发\", \"白\"][tile.value] || \"\"\n  };\n  if (tile.type === TileType.ZI) {\n    return typeMap[tile.type];\n  } else {\n    return `${tile.value}${typeMap[tile.type]}`;\n  }\n};\nexport const tilesEqual = (tile1, tile2) => {\n  return tile1.type === tile2.type && tile1.value === tile2.value;\n};\n\n// 计算剩余牌数\nexport const calculateRemainingTiles = gameState => {\n  const totalTiles = 144; // 标准麻将总牌数\n\n  // 计算已使用的牌数\n  let usedTiles = 0;\n\n  // 计算所有玩家手牌数量\n  Object.values(gameState.player_hands).forEach(hand => {\n    usedTiles += hand.tiles.length;\n    // 计算碰牌杠牌数量\n    hand.melds.forEach(meld => {\n      usedTiles += meld.tiles.length;\n    });\n  });\n\n  // 计算弃牌数量\n  usedTiles += gameState.discarded_tiles.length;\n  return Math.max(0, totalTiles - usedTiles);\n};","map":{"version":3,"names":["TileType","MeldType","GangType","InputMode","createTile","type","value","tileToCode","tile","WAN","TIAO","TONG","ZI","Error","codeToTile","code","tileToString","typeMap","tilesEqual","tile1","tile2","calculateRemainingTiles","gameState","totalTiles","usedTiles","Object","values","player_hands","forEach","hand","tiles","length","melds","meld","discarded_tiles","Math","max"],"sources":["D:/codes/PocketFlow-Tutorial-Codebase-Knowledge/paul/mj/frontend/src/types/mahjong.ts"],"sourcesContent":["export enum TileType {\r\n  WAN = \"wan\",      // 万\r\n  TIAO = \"tiao\",    // 条\r\n  TONG = \"tong\",    // 筒\r\n  ZI = \"zi\"         // 字牌\r\n}\r\n\r\nexport interface Tile {\r\n  type: TileType;\r\n  value: number;\r\n}\r\n\r\nexport enum MeldType {\r\n  PENG = \"peng\",    // 碰\r\n  GANG = \"gang\",    // 杠\r\n  CHI = \"chi\"       // 吃\r\n}\r\n\r\nexport enum GangType {\r\n  MING_GANG = \"ming_gang\",  // 明杠\r\n  AN_GANG = \"an_gang\"       // 暗杠\r\n}\r\n\r\nexport interface Meld {\r\n  type: MeldType;\r\n  tiles: Tile[];\r\n  exposed: boolean;\r\n  gang_type?: GangType; // 杠牌类型（仅当type为GANG时有效）\r\n}\r\n\r\nexport interface HandTiles {\r\n  tiles: Tile[];\r\n  melds: Meld[];\r\n}\r\n\r\nexport interface PlayerAction {\r\n  player_id: number;\r\n  action_type: string;\r\n  tiles: Tile[];\r\n  timestamp?: number;\r\n}\r\n\r\nexport interface GameState {\r\n  player_hands: { [key: number]: HandTiles };\r\n  discarded_tiles: Tile[];\r\n  player_discarded_tiles?: { [key: number]: Tile[] };\r\n  remaining_tiles: Tile[];\r\n  current_player: number;\r\n  actions_history: PlayerAction[];\r\n}\r\n\r\nexport interface AnalysisResult {\r\n  recommended_discard?: Tile;\r\n  discard_scores: { [key: string]: number };\r\n  listen_tiles: Tile[];\r\n  win_probability: number;\r\n  remaining_tiles_count: { [key: number]: number };\r\n  suggestions: string[];\r\n}\r\n\r\nexport interface GameRequest {\r\n  game_state: GameState;\r\n  target_player: number;\r\n}\r\n\r\nexport interface GameResponse {\r\n  success: boolean;\r\n  analysis?: AnalysisResult;\r\n  message: string;\r\n}\r\n\r\nexport interface TileInfo {\r\n  code: number;\r\n  type: string;\r\n  value: number;\r\n  display: string;\r\n}\r\n\r\n// 输入模式枚举\r\nexport enum InputMode {\r\n  ADD_TO_HAND = \"add_to_hand\",\r\n  DISCARD = \"discard\", \r\n  PENG = \"peng\",\r\n  MING_GANG = \"ming_gang\",\r\n  AN_GANG = \"an_gang\"\r\n}\r\n\r\n// 工具函数\r\nexport const createTile = (type: TileType, value: number): Tile => ({\r\n  type,\r\n  value\r\n});\r\n\r\nexport const tileToCode = (tile: Tile): number => {\r\n  switch (tile.type) {\r\n    case TileType.WAN:\r\n      return tile.value;\r\n    case TileType.TIAO:\r\n      return tile.value + 10;\r\n    case TileType.TONG:\r\n      return tile.value + 20;\r\n    case TileType.ZI:\r\n      return tile.value + 30;\r\n    default:\r\n      throw new Error(`Invalid tile type: ${tile.type}`);\r\n  }\r\n};\r\n\r\nexport const codeToTile = (code: number): Tile => {\r\n  if (1 <= code && code <= 9) {\r\n    return { type: TileType.WAN, value: code };\r\n  } else if (11 <= code && code <= 19) {\r\n    return { type: TileType.TIAO, value: code - 10 };\r\n  } else if (21 <= code && code <= 29) {\r\n    return { type: TileType.TONG, value: code - 20 };\r\n  } else if (31 <= code && code <= 37) {\r\n    return { type: TileType.ZI, value: code - 30 };\r\n  } else {\r\n    throw new Error(`Invalid tile code: ${code}`);\r\n  }\r\n};\r\n\r\nexport const tileToString = (tile: Tile): string => {\r\n  const typeMap = {\r\n    [TileType.WAN]: \"万\",\r\n    [TileType.TIAO]: \"条\", \r\n    [TileType.TONG]: \"筒\",\r\n    [TileType.ZI]: [\"\", \"东\", \"南\", \"西\", \"北\", \"中\", \"发\", \"白\"][tile.value] || \"\"\r\n  };\r\n  \r\n  if (tile.type === TileType.ZI) {\r\n    return typeMap[tile.type];\r\n  } else {\r\n    return `${tile.value}${typeMap[tile.type]}`;\r\n  }\r\n};\r\n\r\nexport const tilesEqual = (tile1: Tile, tile2: Tile): boolean => {\r\n  return tile1.type === tile2.type && tile1.value === tile2.value;\r\n};\r\n\r\n// 计算剩余牌数\r\nexport const calculateRemainingTiles = (gameState: GameState): number => {\r\n  const totalTiles = 144; // 标准麻将总牌数\r\n  \r\n  // 计算已使用的牌数\r\n  let usedTiles = 0;\r\n  \r\n  // 计算所有玩家手牌数量\r\n  Object.values(gameState.player_hands).forEach(hand => {\r\n    usedTiles += hand.tiles.length;\r\n    // 计算碰牌杠牌数量\r\n    hand.melds.forEach(meld => {\r\n      usedTiles += meld.tiles.length;\r\n    });\r\n  });\r\n  \r\n  // 计算弃牌数量\r\n  usedTiles += gameState.discarded_tiles.length;\r\n  \r\n  return Math.max(0, totalTiles - usedTiles);\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}