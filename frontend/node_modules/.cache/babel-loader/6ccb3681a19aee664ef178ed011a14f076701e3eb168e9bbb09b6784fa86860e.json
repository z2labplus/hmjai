{"ast":null,"code":"import { create } from 'zustand';\nimport { subscribeWithSelector } from 'zustand/middleware';\nconst initialGameState = {\n  player_hands: {\n    0: {\n      tiles: [],\n      melds: []\n    },\n    1: {\n      tiles: [],\n      melds: []\n    },\n    2: {\n      tiles: [],\n      melds: []\n    },\n    3: {\n      tiles: [],\n      melds: []\n    }\n  },\n  discarded_tiles: [],\n  remaining_tiles: [],\n  current_player: 0,\n  actions_history: []\n};\nexport const useGameStore = create()(subscribeWithSelector((set, get) => ({\n  // 初始状态\n  gameState: initialGameState,\n  analysisResult: null,\n  isAnalyzing: false,\n  availableTiles: [],\n  isConnected: false,\n  connectionId: null,\n  // Setters\n  setGameState: gameState => set({\n    gameState\n  }),\n  setAnalysisResult: result => set({\n    analysisResult: result\n  }),\n  setIsAnalyzing: analyzing => set({\n    isAnalyzing: analyzing\n  }),\n  setAvailableTiles: tiles => set({\n    availableTiles: tiles\n  }),\n  setConnectionStatus: (connected, id) => set({\n    isConnected: connected,\n    connectionId: id || null\n  }),\n  // 游戏操作\n  addTileToHand: (playerId, tile) => set(state => {\n    const newGameState = {\n      ...state.gameState\n    };\n    const playerHand = {\n      ...newGameState.player_hands[playerId]\n    };\n    playerHand.tiles = [...playerHand.tiles, tile];\n    newGameState.player_hands[playerId] = playerHand;\n    return {\n      gameState: newGameState\n    };\n  }),\n  removeTileFromHand: (playerId, tileToRemove) => set(state => {\n    const newGameState = {\n      ...state.gameState\n    };\n    const playerHand = {\n      ...newGameState.player_hands[playerId]\n    };\n\n    // 找到第一个匹配的牌并移除\n    const tileIndex = playerHand.tiles.findIndex(tile => tile.type === tileToRemove.type && tile.value === tileToRemove.value);\n    if (tileIndex !== -1) {\n      playerHand.tiles = [...playerHand.tiles.slice(0, tileIndex), ...playerHand.tiles.slice(tileIndex + 1)];\n      newGameState.player_hands[playerId] = playerHand;\n    }\n    return {\n      gameState: newGameState\n    };\n  }),\n  addDiscardedTile: tile => set(state => {\n    const newGameState = {\n      ...state.gameState\n    };\n    newGameState.discarded_tiles = [...newGameState.discarded_tiles, tile];\n    return {\n      gameState: newGameState\n    };\n  }),\n  addMeld: (playerId, meld) => set(state => {\n    const newGameState = {\n      ...state.gameState\n    };\n    const playerHand = {\n      ...newGameState.player_hands[playerId]\n    };\n    playerHand.melds = [...playerHand.melds, meld];\n    newGameState.player_hands[playerId] = playerHand;\n    return {\n      gameState: newGameState\n    };\n  }),\n  addAction: action => set(state => {\n    const newGameState = {\n      ...state.gameState\n    };\n    newGameState.actions_history = [...newGameState.actions_history, action];\n    return {\n      gameState: newGameState\n    };\n  }),\n  // 重置功能\n  resetGame: () => set({\n    gameState: initialGameState,\n    analysisResult: null,\n    isAnalyzing: false\n  }),\n  clearAnalysis: () => set({\n    analysisResult: null\n  })\n})));\n\n// 选择器函数，用于获取特定数据\nexport const selectPlayerHand = playerId => state => state.gameState.player_hands[playerId];\nexport const selectMyHand = () => state => state.gameState.player_hands[0]; // 假设玩家ID为0\n\nexport const selectDiscardedTiles = () => state => state.gameState.discarded_tiles;\nexport const selectAnalysis = () => state => state.analysisResult;\nexport const selectIsAnalyzing = () => state => state.isAnalyzing;","map":{"version":3,"names":["create","subscribeWithSelector","initialGameState","player_hands","tiles","melds","discarded_tiles","remaining_tiles","current_player","actions_history","useGameStore","set","get","gameState","analysisResult","isAnalyzing","availableTiles","isConnected","connectionId","setGameState","setAnalysisResult","result","setIsAnalyzing","analyzing","setAvailableTiles","setConnectionStatus","connected","id","addTileToHand","playerId","tile","state","newGameState","playerHand","removeTileFromHand","tileToRemove","tileIndex","findIndex","type","value","slice","addDiscardedTile","addMeld","meld","addAction","action","resetGame","clearAnalysis","selectPlayerHand","selectMyHand","selectDiscardedTiles","selectAnalysis","selectIsAnalyzing"],"sources":["D:/codes/PocketFlow-Tutorial-Codebase-Knowledge/paul/mj/frontend/src/stores/gameStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { subscribeWithSelector } from 'zustand/middleware';\r\nimport { \r\n  GameState, \r\n  AnalysisResult, \r\n  Tile, \r\n  HandTiles, \r\n  PlayerAction,\r\n  TileInfo,\r\n  MeldType,\r\n  Meld\r\n} from '../types/mahjong';\r\n\r\ninterface GameStore {\r\n  // 游戏状态\r\n  gameState: GameState;\r\n  analysisResult: AnalysisResult | null;\r\n  isAnalyzing: boolean;\r\n  \r\n  // 可用牌信息\r\n  availableTiles: TileInfo[];\r\n  \r\n  // WebSocket连接状态\r\n  isConnected: boolean;\r\n  connectionId: string | null;\r\n  \r\n  // Actions\r\n  setGameState: (gameState: GameState) => void;\r\n  setAnalysisResult: (result: AnalysisResult) => void;\r\n  setIsAnalyzing: (analyzing: boolean) => void;\r\n  setAvailableTiles: (tiles: TileInfo[]) => void;\r\n  setConnectionStatus: (connected: boolean, id?: string) => void;\r\n  \r\n  // 游戏操作\r\n  addTileToHand: (playerId: number, tile: Tile) => void;\r\n  removeTileFromHand: (playerId: number, tile: Tile) => void;\r\n  addDiscardedTile: (tile: Tile) => void;\r\n  addMeld: (playerId: number, meld: Meld) => void;\r\n  addAction: (action: PlayerAction) => void;\r\n  \r\n  // 重置功能\r\n  resetGame: () => void;\r\n  clearAnalysis: () => void;\r\n}\r\n\r\nconst initialGameState: GameState = {\r\n  player_hands: {\r\n    0: { tiles: [], melds: [] },\r\n    1: { tiles: [], melds: [] },\r\n    2: { tiles: [], melds: [] },\r\n    3: { tiles: [], melds: [] }\r\n  },\r\n  discarded_tiles: [],\r\n  remaining_tiles: [],\r\n  current_player: 0,\r\n  actions_history: []\r\n};\r\n\r\nexport const useGameStore = create<GameStore>()(\r\n  subscribeWithSelector((set, get) => ({\r\n    // 初始状态\r\n    gameState: initialGameState,\r\n    analysisResult: null,\r\n    isAnalyzing: false,\r\n    availableTiles: [],\r\n    isConnected: false,\r\n    connectionId: null,\r\n    \r\n    // Setters\r\n    setGameState: (gameState) => set({ gameState }),\r\n    \r\n    setAnalysisResult: (result) => set({ analysisResult: result }),\r\n    \r\n    setIsAnalyzing: (analyzing) => set({ isAnalyzing: analyzing }),\r\n    \r\n    setAvailableTiles: (tiles) => set({ availableTiles: tiles }),\r\n    \r\n    setConnectionStatus: (connected, id) => \r\n      set({ isConnected: connected, connectionId: id || null }),\r\n    \r\n    // 游戏操作\r\n    addTileToHand: (playerId, tile) => set((state) => {\r\n      const newGameState = { ...state.gameState };\r\n      const playerHand = { ...newGameState.player_hands[playerId] };\r\n      playerHand.tiles = [...playerHand.tiles, tile];\r\n      newGameState.player_hands[playerId] = playerHand;\r\n      \r\n      return { gameState: newGameState };\r\n    }),\r\n    \r\n    removeTileFromHand: (playerId, tileToRemove) => set((state) => {\r\n      const newGameState = { ...state.gameState };\r\n      const playerHand = { ...newGameState.player_hands[playerId] };\r\n      \r\n      // 找到第一个匹配的牌并移除\r\n      const tileIndex = playerHand.tiles.findIndex(tile => \r\n        tile.type === tileToRemove.type && tile.value === tileToRemove.value\r\n      );\r\n      \r\n      if (tileIndex !== -1) {\r\n        playerHand.tiles = [\r\n          ...playerHand.tiles.slice(0, tileIndex),\r\n          ...playerHand.tiles.slice(tileIndex + 1)\r\n        ];\r\n        newGameState.player_hands[playerId] = playerHand;\r\n      }\r\n      \r\n      return { gameState: newGameState };\r\n    }),\r\n    \r\n    addDiscardedTile: (tile) => set((state) => {\r\n      const newGameState = { ...state.gameState };\r\n      newGameState.discarded_tiles = [...newGameState.discarded_tiles, tile];\r\n      return { gameState: newGameState };\r\n    }),\r\n    \r\n    addMeld: (playerId, meld) => set((state) => {\r\n      const newGameState = { ...state.gameState };\r\n      const playerHand = { ...newGameState.player_hands[playerId] };\r\n      playerHand.melds = [...playerHand.melds, meld];\r\n      newGameState.player_hands[playerId] = playerHand;\r\n      \r\n      return { gameState: newGameState };\r\n    }),\r\n    \r\n    addAction: (action) => set((state) => {\r\n      const newGameState = { ...state.gameState };\r\n      newGameState.actions_history = [...newGameState.actions_history, action];\r\n      return { gameState: newGameState };\r\n    }),\r\n    \r\n    // 重置功能\r\n    resetGame: () => set({\r\n      gameState: initialGameState,\r\n      analysisResult: null,\r\n      isAnalyzing: false\r\n    }),\r\n    \r\n    clearAnalysis: () => set({ analysisResult: null })\r\n  }))\r\n);\r\n\r\n// 选择器函数，用于获取特定数据\r\nexport const selectPlayerHand = (playerId: number) => (state: GameStore) => \r\n  state.gameState.player_hands[playerId];\r\n\r\nexport const selectMyHand = () => (state: GameStore) => \r\n  state.gameState.player_hands[0]; // 假设玩家ID为0\r\n\r\nexport const selectDiscardedTiles = () => (state: GameStore) => \r\n  state.gameState.discarded_tiles;\r\n\r\nexport const selectAnalysis = () => (state: GameStore) => \r\n  state.analysisResult;\r\n\r\nexport const selectIsAnalyzing = () => (state: GameStore) => \r\n  state.isAnalyzing; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}