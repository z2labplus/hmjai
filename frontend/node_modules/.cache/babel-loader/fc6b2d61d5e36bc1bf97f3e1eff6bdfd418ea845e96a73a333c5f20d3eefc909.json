{"ast":null,"code":"import _objectSpread from\"D:/codes/PocketFlow-Tutorial-Codebase-Knowledge/paul/mj/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{create}from'zustand';import{subscribeWithSelector}from'zustand/middleware';import{MeldType,TileType,GangType}from'../types/mahjong';// 测试用的直杠数据\nconst testDirectKong={id:\"test_kong_1\",type:MeldType.GANG,gang_type:GangType.MING_GANG,tiles:[{type:TileType.WAN,value:5,id:\"wan5_1\"},{type:TileType.WAN,value:5,id:\"wan5_2\"},{type:TileType.WAN,value:5,id:\"wan5_3\"},{type:TileType.WAN,value:5,id:\"wan5_4\"}],exposed:true,// 明杠是暴露的\nsource_player:2,// 来自玩家2（对家）\ntimestamp:Date.now()};const initialGameState={player_hands:{0:{tiles:[{type:TileType.WAN,value:1},{type:TileType.WAN,value:2},{type:TileType.WAN,value:3}],melds:[testDirectKong]// 添加测试直杠数据\n},1:{tiles:[{type:TileType.TIAO,value:3},{type:TileType.TIAO,value:3},{type:TileType.TIAO,value:3},{type:TileType.TIAO,value:3}],melds:[]},2:{tiles:[],melds:[]},3:{tiles:[],melds:[]}},discarded_tiles:[],player_discarded_tiles:{0:[],1:[],2:[],3:[]},remaining_tiles:[],current_player:0,actions_history:[]};export const useGameStore=create()(subscribeWithSelector((set,get)=>({// 初始状态\ngameState:initialGameState,analysisResult:null,isAnalyzing:false,availableTiles:[],isConnected:false,connectionId:null,// Setters\nsetGameState:gameState=>set({gameState}),setAnalysisResult:result=>set({analysisResult:result}),setIsAnalyzing:analyzing=>set({isAnalyzing:analyzing}),setAvailableTiles:tiles=>set({availableTiles:tiles}),setConnectionStatus:(connected,id)=>set({isConnected:connected,connectionId:id||null}),// 游戏操作\naddTileToHand:(playerId,tile)=>set(state=>{const newGameState=_objectSpread({},state.gameState);const playerHand=_objectSpread({},newGameState.player_hands[playerId]);playerHand.tiles=[...playerHand.tiles,tile];newGameState.player_hands[playerId]=playerHand;return{gameState:newGameState};}),removeTileFromHand:(playerId,tileToRemove)=>set(state=>{const newGameState=_objectSpread({},state.gameState);const playerHand=_objectSpread({},newGameState.player_hands[playerId]);// 找到第一个匹配的牌并移除\nconst tileIndex=playerHand.tiles.findIndex(tile=>tile.type===tileToRemove.type&&tile.value===tileToRemove.value);if(tileIndex!==-1){playerHand.tiles=[...playerHand.tiles.slice(0,tileIndex),...playerHand.tiles.slice(tileIndex+1)];newGameState.player_hands[playerId]=playerHand;}return{gameState:newGameState};}),addDiscardedTile:function(tile){let playerId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;return set(state=>{const newGameState=_objectSpread({},state.gameState);// 添加到全局弃牌池（保持兼容性）\nnewGameState.discarded_tiles=[...newGameState.discarded_tiles,tile];// 添加到指定玩家的弃牌池\nif(newGameState.player_discarded_tiles){newGameState.player_discarded_tiles=_objectSpread(_objectSpread({},newGameState.player_discarded_tiles),{},{[playerId]:[...(newGameState.player_discarded_tiles[playerId]||[]),tile]});}else{newGameState.player_discarded_tiles={0:playerId===0?[tile]:[],1:playerId===1?[tile]:[],2:playerId===2?[tile]:[],3:playerId===3?[tile]:[]};}return{gameState:newGameState};});},addMeld:(playerId,meld)=>set(state=>{const newGameState=_objectSpread({},state.gameState);const playerHand=_objectSpread({},newGameState.player_hands[playerId]);playerHand.melds=[...playerHand.melds,meld];newGameState.player_hands[playerId]=playerHand;return{gameState:newGameState};}),addAction:action=>set(state=>{const newGameState=_objectSpread({},state.gameState);newGameState.actions_history=[...newGameState.actions_history,action];return{gameState:newGameState};}),// 重置功能\nresetGame:()=>set({gameState:initialGameState,analysisResult:null,isAnalyzing:false}),clearAnalysis:()=>set({analysisResult:null})})));// 选择器函数，用于获取特定数据\nexport const selectPlayerHand=playerId=>state=>state.gameState.player_hands[playerId];export const selectMyHand=()=>state=>state.gameState.player_hands[0];// 假设玩家ID为0\nexport const selectDiscardedTiles=()=>state=>state.gameState.discarded_tiles;export const selectPlayerDiscardedTiles=playerId=>state=>{var _state$gameState$play;return((_state$gameState$play=state.gameState.player_discarded_tiles)===null||_state$gameState$play===void 0?void 0:_state$gameState$play[playerId])||[];};export const selectAnalysis=()=>state=>state.analysisResult;export const selectIsAnalyzing=()=>state=>state.isAnalyzing;","map":{"version":3,"names":["create","subscribeWithSelector","MeldType","TileType","GangType","testDirectKong","id","type","GANG","gang_type","MING_GANG","tiles","WAN","value","exposed","source_player","timestamp","Date","now","initialGameState","player_hands","melds","TIAO","discarded_tiles","player_discarded_tiles","remaining_tiles","current_player","actions_history","useGameStore","set","get","gameState","analysisResult","isAnalyzing","availableTiles","isConnected","connectionId","setGameState","setAnalysisResult","result","setIsAnalyzing","analyzing","setAvailableTiles","setConnectionStatus","connected","addTileToHand","playerId","tile","state","newGameState","_objectSpread","playerHand","removeTileFromHand","tileToRemove","tileIndex","findIndex","slice","addDiscardedTile","arguments","length","undefined","addMeld","meld","addAction","action","resetGame","clearAnalysis","selectPlayerHand","selectMyHand","selectDiscardedTiles","selectPlayerDiscardedTiles","_state$gameState$play","selectAnalysis","selectIsAnalyzing"],"sources":["D:/codes/PocketFlow-Tutorial-Codebase-Knowledge/paul/mj/frontend/src/stores/gameStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { subscribeWithSelector } from 'zustand/middleware';\nimport { \n  GameState, \n  AnalysisResult, \n  Tile, \n  HandTiles, \n  PlayerAction,\n  TileInfo,\n  MeldType,\n  Meld,\n  TileType,\n  GangType\n} from '../types/mahjong';\n\n// 测试用的直杠数据\nconst testDirectKong: Meld = {\n  id: \"test_kong_1\",\n  type: MeldType.GANG,\n  gang_type: GangType.MING_GANG,\n  tiles: [\n    { type: TileType.WAN, value: 5, id: \"wan5_1\" },\n    { type: TileType.WAN, value: 5, id: \"wan5_2\" },\n    { type: TileType.WAN, value: 5, id: \"wan5_3\" },\n    { type: TileType.WAN, value: 5, id: \"wan5_4\" }\n  ],\n  exposed: true, // 明杠是暴露的\n  source_player: 2, // 来自玩家2（对家）\n  timestamp: Date.now()\n};\n\ninterface GameStore {\n  // 游戏状态\n  gameState: GameState;\n  analysisResult: AnalysisResult | null;\n  isAnalyzing: boolean;\n  \n  // 可用牌信息\n  availableTiles: TileInfo[];\n  \n  // WebSocket连接状态\n  isConnected: boolean;\n  connectionId: string | null;\n  \n  // Actions\n  setGameState: (gameState: GameState) => void;\n  setAnalysisResult: (result: AnalysisResult) => void;\n  setIsAnalyzing: (analyzing: boolean) => void;\n  setAvailableTiles: (tiles: TileInfo[]) => void;\n  setConnectionStatus: (connected: boolean, id?: string) => void;\n  \n  // 游戏操作\n  addTileToHand: (playerId: number, tile: Tile) => void;\n  removeTileFromHand: (playerId: number, tile: Tile) => void;\n  addDiscardedTile: (tile: Tile, playerId?: number) => void;\n  addMeld: (playerId: number, meld: Meld) => void;\n  addAction: (action: PlayerAction) => void;\n  \n  // 重置功能\n  resetGame: () => void;\n  clearAnalysis: () => void;\n}\n\nconst initialGameState: GameState = {\n  player_hands: {\n    0: { \n      tiles: [\n        { type: TileType.WAN, value: 1 },\n        { type: TileType.WAN, value: 2 },\n        { type: TileType.WAN, value: 3 }\n      ], \n      melds: [testDirectKong] // 添加测试直杠数据\n    },\n    1: { \n      tiles: [\n        { type: TileType.TIAO, value: 3 },\n        { type: TileType.TIAO, value: 3 },\n        { type: TileType.TIAO, value: 3 },\n        { type: TileType.TIAO, value: 3 }\n      ], \n      melds: [] \n    },\n    2: { tiles: [], melds: [] },\n    3: { tiles: [], melds: [] }\n  },\n  discarded_tiles: [],\n  player_discarded_tiles: {\n    0: [],\n    1: [],\n    2: [],\n    3: []\n  },\n  remaining_tiles: [],\n  current_player: 0,\n  actions_history: []\n};\n\nexport const useGameStore = create<GameStore>()(\n  subscribeWithSelector((set, get) => ({\n    // 初始状态\n    gameState: initialGameState,\n    analysisResult: null,\n    isAnalyzing: false,\n    availableTiles: [],\n    isConnected: false,\n    connectionId: null,\n    \n    // Setters\n    setGameState: (gameState) => set({ gameState }),\n    \n    setAnalysisResult: (result) => set({ analysisResult: result }),\n    \n    setIsAnalyzing: (analyzing) => set({ isAnalyzing: analyzing }),\n    \n    setAvailableTiles: (tiles) => set({ availableTiles: tiles }),\n    \n    setConnectionStatus: (connected, id) => \n      set({ isConnected: connected, connectionId: id || null }),\n    \n    // 游戏操作\n    addTileToHand: (playerId, tile) => set((state) => {\n      const newGameState = { ...state.gameState };\n      const playerHand = { ...newGameState.player_hands[playerId] };\n      playerHand.tiles = [...playerHand.tiles, tile];\n      newGameState.player_hands[playerId] = playerHand;\n      \n      return { gameState: newGameState };\n    }),\n    \n    removeTileFromHand: (playerId, tileToRemove) => set((state) => {\n      const newGameState = { ...state.gameState };\n      const playerHand = { ...newGameState.player_hands[playerId] };\n      \n      // 找到第一个匹配的牌并移除\n      const tileIndex = playerHand.tiles.findIndex(tile => \n        tile.type === tileToRemove.type && tile.value === tileToRemove.value\n      );\n      \n      if (tileIndex !== -1) {\n        playerHand.tiles = [\n          ...playerHand.tiles.slice(0, tileIndex),\n          ...playerHand.tiles.slice(tileIndex + 1)\n        ];\n        newGameState.player_hands[playerId] = playerHand;\n      }\n      \n      return { gameState: newGameState };\n    }),\n    \n    addDiscardedTile: (tile, playerId = 0) => set((state) => {\n      const newGameState = { ...state.gameState };\n      \n      // 添加到全局弃牌池（保持兼容性）\n      newGameState.discarded_tiles = [...newGameState.discarded_tiles, tile];\n      \n      // 添加到指定玩家的弃牌池\n      if (newGameState.player_discarded_tiles) {\n        newGameState.player_discarded_tiles = {\n          ...newGameState.player_discarded_tiles,\n          [playerId]: [...(newGameState.player_discarded_tiles[playerId] || []), tile]\n        };\n      } else {\n        newGameState.player_discarded_tiles = {\n          0: playerId === 0 ? [tile] : [],\n          1: playerId === 1 ? [tile] : [],\n          2: playerId === 2 ? [tile] : [],\n          3: playerId === 3 ? [tile] : []\n        };\n      }\n      \n      return { gameState: newGameState };\n    }),\n    \n    addMeld: (playerId, meld) => set((state) => {\n      const newGameState = { ...state.gameState };\n      const playerHand = { ...newGameState.player_hands[playerId] };\n      playerHand.melds = [...playerHand.melds, meld];\n      newGameState.player_hands[playerId] = playerHand;\n      \n      return { gameState: newGameState };\n    }),\n    \n    addAction: (action) => set((state) => {\n      const newGameState = { ...state.gameState };\n      newGameState.actions_history = [...newGameState.actions_history, action];\n      return { gameState: newGameState };\n    }),\n    \n    // 重置功能\n    resetGame: () => set({\n      gameState: initialGameState,\n      analysisResult: null,\n      isAnalyzing: false\n    }),\n    \n    clearAnalysis: () => set({ analysisResult: null })\n  }))\n);\n\n// 选择器函数，用于获取特定数据\nexport const selectPlayerHand = (playerId: number) => (state: GameStore) => \n  state.gameState.player_hands[playerId];\n\nexport const selectMyHand = () => (state: GameStore) => \n  state.gameState.player_hands[0]; // 假设玩家ID为0\n\nexport const selectDiscardedTiles = () => (state: GameStore) => \n  state.gameState.discarded_tiles;\n\nexport const selectPlayerDiscardedTiles = (playerId: number) => (state: GameStore) => \n  state.gameState.player_discarded_tiles?.[playerId] || [];\n\nexport const selectAnalysis = () => (state: GameStore) => \n  state.analysisResult;\n\nexport const selectIsAnalyzing = () => (state: GameStore) => \n  state.isAnalyzing; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}