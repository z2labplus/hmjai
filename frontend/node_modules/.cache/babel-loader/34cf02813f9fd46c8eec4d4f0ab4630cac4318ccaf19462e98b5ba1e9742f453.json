{"ast":null,"code":"export let TileType = /*#__PURE__*/function (TileType) {\n  TileType[\"WAN\"] = \"wan\";\n  // 万\n  TileType[\"TIAO\"] = \"tiao\";\n  // 条\n  TileType[\"TONG\"] = \"tong\";\n  // 筒\n  TileType[\"ZI\"] = \"zi\"; // 字牌\n  return TileType;\n}({});\nexport let MeldType = /*#__PURE__*/function (MeldType) {\n  MeldType[\"PENG\"] = \"peng\";\n  // 碰\n  MeldType[\"GANG\"] = \"gang\";\n  // 杠\n  MeldType[\"CHI\"] = \"chi\"; // 吃\n  return MeldType;\n}({});\n// 工具函数\nexport const createTile = (type, value) => ({\n  type,\n  value\n});\nexport const tileToCode = tile => {\n  switch (tile.type) {\n    case TileType.WAN:\n      return tile.value;\n    case TileType.TIAO:\n      return tile.value + 10;\n    case TileType.TONG:\n      return tile.value + 20;\n    case TileType.ZI:\n      return tile.value + 30;\n    default:\n      throw new Error(`Invalid tile type: ${tile.type}`);\n  }\n};\nexport const codeToTile = code => {\n  if (1 <= code && code <= 9) {\n    return {\n      type: TileType.WAN,\n      value: code\n    };\n  } else if (11 <= code && code <= 19) {\n    return {\n      type: TileType.TIAO,\n      value: code - 10\n    };\n  } else if (21 <= code && code <= 29) {\n    return {\n      type: TileType.TONG,\n      value: code - 20\n    };\n  } else if (31 <= code && code <= 37) {\n    return {\n      type: TileType.ZI,\n      value: code - 30\n    };\n  } else {\n    throw new Error(`Invalid tile code: ${code}`);\n  }\n};\nexport const tileToString = tile => {\n  const typeMap = {\n    [TileType.WAN]: \"万\",\n    [TileType.TIAO]: \"条\",\n    [TileType.TONG]: \"筒\",\n    [TileType.ZI]: [\"\", \"东\", \"南\", \"西\", \"北\", \"中\", \"发\", \"白\"][tile.value] || \"\"\n  };\n  if (tile.type === TileType.ZI) {\n    return typeMap[tile.type];\n  } else {\n    return `${tile.value}${typeMap[tile.type]}`;\n  }\n};\nexport const tilesEqual = (tile1, tile2) => {\n  return tile1.type === tile2.type && tile1.value === tile2.value;\n};","map":{"version":3,"names":["TileType","MeldType","createTile","type","value","tileToCode","tile","WAN","TIAO","TONG","ZI","Error","codeToTile","code","tileToString","typeMap","tilesEqual","tile1","tile2"],"sources":["D:/codes/PocketFlow-Tutorial-Codebase-Knowledge/paul/mj/frontend/src/types/mahjong.ts"],"sourcesContent":["export enum TileType {\r\n  WAN = \"wan\",      // 万\r\n  TIAO = \"tiao\",    // 条\r\n  TONG = \"tong\",    // 筒\r\n  ZI = \"zi\"         // 字牌\r\n}\r\n\r\nexport interface Tile {\r\n  type: TileType;\r\n  value: number;\r\n}\r\n\r\nexport enum MeldType {\r\n  PENG = \"peng\",    // 碰\r\n  GANG = \"gang\",    // 杠\r\n  CHI = \"chi\"       // 吃\r\n}\r\n\r\nexport interface Meld {\r\n  type: MeldType;\r\n  tiles: Tile[];\r\n  exposed: boolean;\r\n}\r\n\r\nexport interface HandTiles {\r\n  tiles: Tile[];\r\n  melds: Meld[];\r\n}\r\n\r\nexport interface PlayerAction {\r\n  player_id: number;\r\n  action_type: string;\r\n  tiles: Tile[];\r\n  timestamp?: number;\r\n}\r\n\r\nexport interface GameState {\r\n  player_hands: { [key: number]: HandTiles };\r\n  discarded_tiles: Tile[];\r\n  remaining_tiles: Tile[];\r\n  current_player: number;\r\n  actions_history: PlayerAction[];\r\n}\r\n\r\nexport interface AnalysisResult {\r\n  recommended_discard?: Tile;\r\n  discard_scores: { [key: string]: number };\r\n  listen_tiles: Tile[];\r\n  win_probability: number;\r\n  remaining_tiles_count: { [key: number]: number };\r\n  suggestions: string[];\r\n}\r\n\r\nexport interface GameRequest {\r\n  game_state: GameState;\r\n  target_player: number;\r\n}\r\n\r\nexport interface GameResponse {\r\n  success: boolean;\r\n  analysis?: AnalysisResult;\r\n  message: string;\r\n}\r\n\r\nexport interface TileInfo {\r\n  code: number;\r\n  type: string;\r\n  value: number;\r\n  display: string;\r\n}\r\n\r\n// 工具函数\r\nexport const createTile = (type: TileType, value: number): Tile => ({\r\n  type,\r\n  value\r\n});\r\n\r\nexport const tileToCode = (tile: Tile): number => {\r\n  switch (tile.type) {\r\n    case TileType.WAN:\r\n      return tile.value;\r\n    case TileType.TIAO:\r\n      return tile.value + 10;\r\n    case TileType.TONG:\r\n      return tile.value + 20;\r\n    case TileType.ZI:\r\n      return tile.value + 30;\r\n    default:\r\n      throw new Error(`Invalid tile type: ${tile.type}`);\r\n  }\r\n};\r\n\r\nexport const codeToTile = (code: number): Tile => {\r\n  if (1 <= code && code <= 9) {\r\n    return { type: TileType.WAN, value: code };\r\n  } else if (11 <= code && code <= 19) {\r\n    return { type: TileType.TIAO, value: code - 10 };\r\n  } else if (21 <= code && code <= 29) {\r\n    return { type: TileType.TONG, value: code - 20 };\r\n  } else if (31 <= code && code <= 37) {\r\n    return { type: TileType.ZI, value: code - 30 };\r\n  } else {\r\n    throw new Error(`Invalid tile code: ${code}`);\r\n  }\r\n};\r\n\r\nexport const tileToString = (tile: Tile): string => {\r\n  const typeMap = {\r\n    [TileType.WAN]: \"万\",\r\n    [TileType.TIAO]: \"条\", \r\n    [TileType.TONG]: \"筒\",\r\n    [TileType.ZI]: [\"\", \"东\", \"南\", \"西\", \"北\", \"中\", \"发\", \"白\"][tile.value] || \"\"\r\n  };\r\n  \r\n  if (tile.type === TileType.ZI) {\r\n    return typeMap[tile.type];\r\n  } else {\r\n    return `${tile.value}${typeMap[tile.type]}`;\r\n  }\r\n};\r\n\r\nexport const tilesEqual = (tile1: Tile, tile2: Tile): boolean => {\r\n  return tile1.type === tile2.type && tile1.value === tile2.value;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}