{"ast":null,"code":"import { create } from 'zustand';\nimport { subscribeWithSelector } from 'zustand/middleware';\nimport { MeldType, TileType, GangType } from '../types/mahjong';\n\n// 测试用的直杠数据\nconst testDirectKong = {\n  id: \"test_kong_1\",\n  type: MeldType.GANG,\n  gang_type: GangType.MING_GANG,\n  tiles: [{\n    type: TileType.WAN,\n    value: 5,\n    id: \"wan5_1\"\n  }, {\n    type: TileType.WAN,\n    value: 5,\n    id: \"wan5_2\"\n  }, {\n    type: TileType.WAN,\n    value: 5,\n    id: \"wan5_3\"\n  }, {\n    type: TileType.WAN,\n    value: 5,\n    id: \"wan5_4\"\n  }],\n  source_player: 2,\n  // 来自玩家2（对家）\n  timestamp: Date.now()\n};\nconst initialGameState = {\n  player_hands: {\n    0: {\n      tiles: [{\n        type: TileType.WAN,\n        value: 1\n      }, {\n        type: TileType.WAN,\n        value: 2\n      }, {\n        type: TileType.WAN,\n        value: 3\n      }],\n      melds: [testDirectKong] // 添加测试直杠数据\n    },\n    1: {\n      tiles: [{\n        type: TileType.TIAO,\n        value: 3\n      }, {\n        type: TileType.TIAO,\n        value: 3\n      }, {\n        type: TileType.TIAO,\n        value: 3\n      }, {\n        type: TileType.TIAO,\n        value: 3\n      }],\n      melds: []\n    },\n    2: {\n      tiles: [],\n      melds: []\n    },\n    3: {\n      tiles: [],\n      melds: []\n    }\n  },\n  discarded_tiles: [],\n  player_discarded_tiles: {\n    0: [],\n    1: [],\n    2: [],\n    3: []\n  },\n  remaining_tiles: [],\n  current_player: 0,\n  actions_history: []\n};\nexport const useGameStore = create()(subscribeWithSelector((set, get) => ({\n  // 初始状态\n  gameState: initialGameState,\n  analysisResult: null,\n  isAnalyzing: false,\n  availableTiles: [],\n  isConnected: false,\n  connectionId: null,\n  // Setters\n  setGameState: gameState => set({\n    gameState\n  }),\n  setAnalysisResult: result => set({\n    analysisResult: result\n  }),\n  setIsAnalyzing: analyzing => set({\n    isAnalyzing: analyzing\n  }),\n  setAvailableTiles: tiles => set({\n    availableTiles: tiles\n  }),\n  setConnectionStatus: (connected, id) => set({\n    isConnected: connected,\n    connectionId: id || null\n  }),\n  // 游戏操作\n  addTileToHand: (playerId, tile) => set(state => {\n    const newGameState = {\n      ...state.gameState\n    };\n    const playerHand = {\n      ...newGameState.player_hands[playerId]\n    };\n    playerHand.tiles = [...playerHand.tiles, tile];\n    newGameState.player_hands[playerId] = playerHand;\n    return {\n      gameState: newGameState\n    };\n  }),\n  removeTileFromHand: (playerId, tileToRemove) => set(state => {\n    const newGameState = {\n      ...state.gameState\n    };\n    const playerHand = {\n      ...newGameState.player_hands[playerId]\n    };\n\n    // 找到第一个匹配的牌并移除\n    const tileIndex = playerHand.tiles.findIndex(tile => tile.type === tileToRemove.type && tile.value === tileToRemove.value);\n    if (tileIndex !== -1) {\n      playerHand.tiles = [...playerHand.tiles.slice(0, tileIndex), ...playerHand.tiles.slice(tileIndex + 1)];\n      newGameState.player_hands[playerId] = playerHand;\n    }\n    return {\n      gameState: newGameState\n    };\n  }),\n  addDiscardedTile: (tile, playerId = 0) => set(state => {\n    const newGameState = {\n      ...state.gameState\n    };\n\n    // 添加到全局弃牌池（保持兼容性）\n    newGameState.discarded_tiles = [...newGameState.discarded_tiles, tile];\n\n    // 添加到指定玩家的弃牌池\n    if (newGameState.player_discarded_tiles) {\n      newGameState.player_discarded_tiles = {\n        ...newGameState.player_discarded_tiles,\n        [playerId]: [...(newGameState.player_discarded_tiles[playerId] || []), tile]\n      };\n    } else {\n      newGameState.player_discarded_tiles = {\n        0: playerId === 0 ? [tile] : [],\n        1: playerId === 1 ? [tile] : [],\n        2: playerId === 2 ? [tile] : [],\n        3: playerId === 3 ? [tile] : []\n      };\n    }\n    return {\n      gameState: newGameState\n    };\n  }),\n  addMeld: (playerId, meld) => set(state => {\n    const newGameState = {\n      ...state.gameState\n    };\n    const playerHand = {\n      ...newGameState.player_hands[playerId]\n    };\n    playerHand.melds = [...playerHand.melds, meld];\n    newGameState.player_hands[playerId] = playerHand;\n    return {\n      gameState: newGameState\n    };\n  }),\n  addAction: action => set(state => {\n    const newGameState = {\n      ...state.gameState\n    };\n    newGameState.actions_history = [...newGameState.actions_history, action];\n    return {\n      gameState: newGameState\n    };\n  }),\n  // 重置功能\n  resetGame: () => set({\n    gameState: initialGameState,\n    analysisResult: null,\n    isAnalyzing: false\n  }),\n  clearAnalysis: () => set({\n    analysisResult: null\n  })\n})));\n\n// 选择器函数，用于获取特定数据\nexport const selectPlayerHand = playerId => state => state.gameState.player_hands[playerId];\nexport const selectMyHand = () => state => state.gameState.player_hands[0]; // 假设玩家ID为0\n\nexport const selectDiscardedTiles = () => state => state.gameState.discarded_tiles;\nexport const selectPlayerDiscardedTiles = playerId => state => {\n  var _state$gameState$play;\n  return ((_state$gameState$play = state.gameState.player_discarded_tiles) === null || _state$gameState$play === void 0 ? void 0 : _state$gameState$play[playerId]) || [];\n};\nexport const selectAnalysis = () => state => state.analysisResult;\nexport const selectIsAnalyzing = () => state => state.isAnalyzing;","map":{"version":3,"names":["create","subscribeWithSelector","MeldType","TileType","GangType","testDirectKong","id","type","GANG","gang_type","MING_GANG","tiles","WAN","value","source_player","timestamp","Date","now","initialGameState","player_hands","melds","TIAO","discarded_tiles","player_discarded_tiles","remaining_tiles","current_player","actions_history","useGameStore","set","get","gameState","analysisResult","isAnalyzing","availableTiles","isConnected","connectionId","setGameState","setAnalysisResult","result","setIsAnalyzing","analyzing","setAvailableTiles","setConnectionStatus","connected","addTileToHand","playerId","tile","state","newGameState","playerHand","removeTileFromHand","tileToRemove","tileIndex","findIndex","slice","addDiscardedTile","addMeld","meld","addAction","action","resetGame","clearAnalysis","selectPlayerHand","selectMyHand","selectDiscardedTiles","selectPlayerDiscardedTiles","_state$gameState$play","selectAnalysis","selectIsAnalyzing"],"sources":["D:/codes/PocketFlow-Tutorial-Codebase-Knowledge/paul/mj/frontend/src/stores/gameStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { subscribeWithSelector } from 'zustand/middleware';\nimport { \n  GameState, \n  AnalysisResult, \n  Tile, \n  HandTiles, \n  PlayerAction,\n  TileInfo,\n  MeldType,\n  Meld,\n  TileType,\n  GangType\n} from '../types/mahjong';\n\n// 测试用的直杠数据\nconst testDirectKong: Meld = {\n  id: \"test_kong_1\",\n  type: MeldType.GANG,\n  gang_type: GangType.MING_GANG,\n  tiles: [\n    { type: TileType.WAN, value: 5, id: \"wan5_1\" },\n    { type: TileType.WAN, value: 5, id: \"wan5_2\" },\n    { type: TileType.WAN, value: 5, id: \"wan5_3\" },\n    { type: TileType.WAN, value: 5, id: \"wan5_4\" }\n  ],\n  source_player: 2, // 来自玩家2（对家）\n  timestamp: Date.now()\n};\n\ninterface GameStore {\n  // 游戏状态\n  gameState: GameState;\n  analysisResult: AnalysisResult | null;\n  isAnalyzing: boolean;\n  \n  // 可用牌信息\n  availableTiles: TileInfo[];\n  \n  // WebSocket连接状态\n  isConnected: boolean;\n  connectionId: string | null;\n  \n  // Actions\n  setGameState: (gameState: GameState) => void;\n  setAnalysisResult: (result: AnalysisResult) => void;\n  setIsAnalyzing: (analyzing: boolean) => void;\n  setAvailableTiles: (tiles: TileInfo[]) => void;\n  setConnectionStatus: (connected: boolean, id?: string) => void;\n  \n  // 游戏操作\n  addTileToHand: (playerId: number, tile: Tile) => void;\n  removeTileFromHand: (playerId: number, tile: Tile) => void;\n  addDiscardedTile: (tile: Tile, playerId?: number) => void;\n  addMeld: (playerId: number, meld: Meld) => void;\n  addAction: (action: PlayerAction) => void;\n  \n  // 重置功能\n  resetGame: () => void;\n  clearAnalysis: () => void;\n}\n\nconst initialGameState: GameState = {\n  player_hands: {\n    0: { \n      tiles: [\n        { type: TileType.WAN, value: 1 },\n        { type: TileType.WAN, value: 2 },\n        { type: TileType.WAN, value: 3 }\n      ], \n      melds: [testDirectKong] // 添加测试直杠数据\n    },\n    1: { \n      tiles: [\n        { type: TileType.TIAO, value: 3 },\n        { type: TileType.TIAO, value: 3 },\n        { type: TileType.TIAO, value: 3 },\n        { type: TileType.TIAO, value: 3 }\n      ], \n      melds: [] \n    },\n    2: { tiles: [], melds: [] },\n    3: { tiles: [], melds: [] }\n  },\n  discarded_tiles: [],\n  player_discarded_tiles: {\n    0: [],\n    1: [],\n    2: [],\n    3: []\n  },\n  remaining_tiles: [],\n  current_player: 0,\n  actions_history: []\n};\n\nexport const useGameStore = create<GameStore>()(\n  subscribeWithSelector((set, get) => ({\n    // 初始状态\n    gameState: initialGameState,\n    analysisResult: null,\n    isAnalyzing: false,\n    availableTiles: [],\n    isConnected: false,\n    connectionId: null,\n    \n    // Setters\n    setGameState: (gameState) => set({ gameState }),\n    \n    setAnalysisResult: (result) => set({ analysisResult: result }),\n    \n    setIsAnalyzing: (analyzing) => set({ isAnalyzing: analyzing }),\n    \n    setAvailableTiles: (tiles) => set({ availableTiles: tiles }),\n    \n    setConnectionStatus: (connected, id) => \n      set({ isConnected: connected, connectionId: id || null }),\n    \n    // 游戏操作\n    addTileToHand: (playerId, tile) => set((state) => {\n      const newGameState = { ...state.gameState };\n      const playerHand = { ...newGameState.player_hands[playerId] };\n      playerHand.tiles = [...playerHand.tiles, tile];\n      newGameState.player_hands[playerId] = playerHand;\n      \n      return { gameState: newGameState };\n    }),\n    \n    removeTileFromHand: (playerId, tileToRemove) => set((state) => {\n      const newGameState = { ...state.gameState };\n      const playerHand = { ...newGameState.player_hands[playerId] };\n      \n      // 找到第一个匹配的牌并移除\n      const tileIndex = playerHand.tiles.findIndex(tile => \n        tile.type === tileToRemove.type && tile.value === tileToRemove.value\n      );\n      \n      if (tileIndex !== -1) {\n        playerHand.tiles = [\n          ...playerHand.tiles.slice(0, tileIndex),\n          ...playerHand.tiles.slice(tileIndex + 1)\n        ];\n        newGameState.player_hands[playerId] = playerHand;\n      }\n      \n      return { gameState: newGameState };\n    }),\n    \n    addDiscardedTile: (tile, playerId = 0) => set((state) => {\n      const newGameState = { ...state.gameState };\n      \n      // 添加到全局弃牌池（保持兼容性）\n      newGameState.discarded_tiles = [...newGameState.discarded_tiles, tile];\n      \n      // 添加到指定玩家的弃牌池\n      if (newGameState.player_discarded_tiles) {\n        newGameState.player_discarded_tiles = {\n          ...newGameState.player_discarded_tiles,\n          [playerId]: [...(newGameState.player_discarded_tiles[playerId] || []), tile]\n        };\n      } else {\n        newGameState.player_discarded_tiles = {\n          0: playerId === 0 ? [tile] : [],\n          1: playerId === 1 ? [tile] : [],\n          2: playerId === 2 ? [tile] : [],\n          3: playerId === 3 ? [tile] : []\n        };\n      }\n      \n      return { gameState: newGameState };\n    }),\n    \n    addMeld: (playerId, meld) => set((state) => {\n      const newGameState = { ...state.gameState };\n      const playerHand = { ...newGameState.player_hands[playerId] };\n      playerHand.melds = [...playerHand.melds, meld];\n      newGameState.player_hands[playerId] = playerHand;\n      \n      return { gameState: newGameState };\n    }),\n    \n    addAction: (action) => set((state) => {\n      const newGameState = { ...state.gameState };\n      newGameState.actions_history = [...newGameState.actions_history, action];\n      return { gameState: newGameState };\n    }),\n    \n    // 重置功能\n    resetGame: () => set({\n      gameState: initialGameState,\n      analysisResult: null,\n      isAnalyzing: false\n    }),\n    \n    clearAnalysis: () => set({ analysisResult: null })\n  }))\n);\n\n// 选择器函数，用于获取特定数据\nexport const selectPlayerHand = (playerId: number) => (state: GameStore) => \n  state.gameState.player_hands[playerId];\n\nexport const selectMyHand = () => (state: GameStore) => \n  state.gameState.player_hands[0]; // 假设玩家ID为0\n\nexport const selectDiscardedTiles = () => (state: GameStore) => \n  state.gameState.discarded_tiles;\n\nexport const selectPlayerDiscardedTiles = (playerId: number) => (state: GameStore) => \n  state.gameState.player_discarded_tiles?.[playerId] || [];\n\nexport const selectAnalysis = () => (state: GameStore) => \n  state.analysisResult;\n\nexport const selectIsAnalyzing = () => (state: GameStore) => \n  state.isAnalyzing; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}