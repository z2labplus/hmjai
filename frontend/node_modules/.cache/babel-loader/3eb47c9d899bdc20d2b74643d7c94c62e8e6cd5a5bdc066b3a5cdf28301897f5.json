{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log('API请求:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  return config;\n}, error => {\n  console.error('API请求错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  console.log('API响应:', response.status, response.config.url);\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  console.error('API响应错误:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n  return Promise.reject(error);\n});\n\n// API服务类\nexport class MahjongAPI {\n  /**\n   * 分析游戏状态\n   */\n  static async analyzeGame(request) {\n    try {\n      const response = await api.post('/api/mahjong/analyze', request);\n      return response.data;\n    } catch (error) {\n      console.error('分析游戏失败:', error);\n      throw new Error('分析游戏失败，请稍后重试');\n    }\n  }\n\n  /**\n   * 获取所有麻将牌信息\n   */\n  static async getTileCodes() {\n    try {\n      const response = await api.get('/api/mahjong/tile-codes');\n      return response.data.tiles;\n    } catch (error) {\n      console.error('获取麻将牌信息失败:', error);\n      throw new Error('获取麻将牌信息失败');\n    }\n  }\n\n  /**\n   * 健康检查\n   */\n  static async healthCheck() {\n    try {\n      const response = await api.get('/health');\n      return response.data.status === 'healthy';\n    } catch (error) {\n      console.error('健康检查失败:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 获取API信息\n   */\n  static async getApiInfo() {\n    try {\n      const response = await api.get('/');\n      return response.data;\n    } catch (error) {\n      console.error('获取API信息失败:', error);\n      throw new Error('获取API信息失败');\n    }\n  }\n}\n\n// WebSocket连接管理\nexport class WebSocketManager {\n  constructor(clientId, onMessage, onConnect, onDisconnect, onError) {\n    this.clientId = clientId;\n    this.onMessage = onMessage;\n    this.onConnect = onConnect;\n    this.onDisconnect = onDisconnect;\n    this.onError = onError;\n    this.ws = null;\n    this.reconnectTimeout = null;\n    this.reconnectDelay = 3000;\n    // 3秒后重连\n    this.maxReconnectAttempts = 5;\n    this.reconnectAttempts = 0;\n  }\n  connect() {\n    try {\n      const wsUrl = `${API_BASE_URL.replace('http', 'ws')}/api/mahjong/ws/${this.clientId}`;\n      this.ws = new WebSocket(wsUrl);\n      this.ws.onopen = () => {\n        console.log('WebSocket连接已建立');\n        this.reconnectAttempts = 0;\n        this.onConnect();\n      };\n      this.ws.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          console.log('收到WebSocket消息:', data);\n          this.onMessage(data);\n        } catch (error) {\n          console.error('解析WebSocket消息失败:', error);\n        }\n      };\n      this.ws.onclose = () => {\n        console.log('WebSocket连接已关闭');\n        this.onDisconnect();\n        this.attemptReconnect();\n      };\n      this.ws.onerror = error => {\n        console.error('WebSocket错误:', error);\n        this.onError(error);\n      };\n    } catch (error) {\n      console.error('创建WebSocket连接失败:', error);\n      this.onError(error);\n    }\n  }\n  attemptReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`尝试重连... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      this.reconnectTimeout = setTimeout(() => {\n        this.connect();\n      }, this.reconnectDelay);\n    } else {\n      console.log('达到最大重连次数，停止重连');\n    }\n  }\n  sendMessage(message) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket未连接，无法发送消息');\n    }\n  }\n  disconnect() {\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n  isConnected() {\n    return this.ws !== null && this.ws.readyState === WebSocket.OPEN;\n  }\n}\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","_error$response2","data","MahjongAPI","analyzeGame","post","Error","getTileCodes","get","tiles","healthCheck","getApiInfo","WebSocketManager","constructor","clientId","onMessage","onConnect","onDisconnect","onError","ws","reconnectTimeout","reconnectDelay","maxReconnectAttempts","reconnectAttempts","connect","wsUrl","replace","WebSocket","onopen","onmessage","event","JSON","parse","onclose","attemptReconnect","onerror","setTimeout","sendMessage","message","readyState","OPEN","send","stringify","warn","disconnect","clearTimeout","close","isConnected"],"sources":["D:/codes/PocketFlow-Tutorial-Codebase-Knowledge/paul/mj/frontend/src/utils/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { GameRequest, GameResponse, TileInfo } from '../types/mahjong';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 请求拦截器\napi.interceptors.request.use(\n  (config) => {\n    console.log('API请求:', config.method?.toUpperCase(), config.url);\n    return config;\n  },\n  (error) => {\n    console.error('API请求错误:', error);\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器\napi.interceptors.response.use(\n  (response) => {\n    console.log('API响应:', response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error('API响应错误:', error.response?.status, error.response?.data);\n    return Promise.reject(error);\n  }\n);\n\n// API服务类\nexport class MahjongAPI {\n  /**\n   * 分析游戏状态\n   */\n  static async analyzeGame(request: GameRequest): Promise<GameResponse> {\n    try {\n      const response = await api.post<GameResponse>('/api/mahjong/analyze', request);\n      return response.data;\n    } catch (error) {\n      console.error('分析游戏失败:', error);\n      throw new Error('分析游戏失败，请稍后重试');\n    }\n  }\n\n  /**\n   * 获取所有麻将牌信息\n   */\n  static async getTileCodes(): Promise<TileInfo[]> {\n    try {\n      const response = await api.get<{ tiles: TileInfo[] }>('/api/mahjong/tile-codes');\n      return response.data.tiles;\n    } catch (error) {\n      console.error('获取麻将牌信息失败:', error);\n      throw new Error('获取麻将牌信息失败');\n    }\n  }\n\n  /**\n   * 健康检查\n   */\n  static async healthCheck(): Promise<boolean> {\n    try {\n      const response = await api.get('/health');\n      return response.data.status === 'healthy';\n    } catch (error) {\n      console.error('健康检查失败:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 获取API信息\n   */\n  static async getApiInfo(): Promise<any> {\n    try {\n      const response = await api.get('/');\n      return response.data;\n    } catch (error) {\n      console.error('获取API信息失败:', error);\n      throw new Error('获取API信息失败');\n    }\n  }\n}\n\n// WebSocket连接管理\nexport class WebSocketManager {\n  private ws: WebSocket | null = null;\n  private reconnectTimeout: NodeJS.Timeout | null = null;\n  private readonly reconnectDelay = 3000; // 3秒后重连\n  private readonly maxReconnectAttempts = 5;\n  private reconnectAttempts = 0;\n\n  constructor(\n    private clientId: string,\n    private onMessage: (data: any) => void,\n    private onConnect: () => void,\n    private onDisconnect: () => void,\n    private onError: (error: Event) => void\n  ) {}\n\n  connect(): void {\n    try {\n      const wsUrl = `${API_BASE_URL.replace('http', 'ws')}/api/mahjong/ws/${this.clientId}`;\n      this.ws = new WebSocket(wsUrl);\n\n      this.ws.onopen = () => {\n        console.log('WebSocket连接已建立');\n        this.reconnectAttempts = 0;\n        this.onConnect();\n      };\n\n      this.ws.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          console.log('收到WebSocket消息:', data);\n          this.onMessage(data);\n        } catch (error) {\n          console.error('解析WebSocket消息失败:', error);\n        }\n      };\n\n      this.ws.onclose = () => {\n        console.log('WebSocket连接已关闭');\n        this.onDisconnect();\n        this.attemptReconnect();\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('WebSocket错误:', error);\n        this.onError(error);\n      };\n    } catch (error) {\n      console.error('创建WebSocket连接失败:', error);\n      this.onError(error as Event);\n    }\n  }\n\n  private attemptReconnect(): void {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`尝试重连... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      \n      this.reconnectTimeout = setTimeout(() => {\n        this.connect();\n      }, this.reconnectDelay);\n    } else {\n      console.log('达到最大重连次数，停止重连');\n    }\n  }\n\n  sendMessage(message: any): void {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket未连接，无法发送消息');\n    }\n  }\n\n  disconnect(): void {\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n    \n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  isConnected(): boolean {\n    return this.ws !== null && this.ws.readyState === WebSocket.OPEN;\n  }\n}\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}